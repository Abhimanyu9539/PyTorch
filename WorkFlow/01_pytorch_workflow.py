# -*- coding: utf-8 -*-
"""01_PyTorch_Workflow.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uXr26oii5eM2OY4eArxGELCSY6axawNa
"""

# Import libraries
import torch
from torch import nn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

torch.__version__

"""### 1. Data Preparing and Loading"""

## Create known parameters
weight = 0.7
bias = 0.3

# Create
start = 0
end = 1
step = 0.02
X = torch.arange(start, end, step).unsqueeze(dim=1)
y = weight * X + bias

X[:10], y[:10], len(X), len(y)

"""### Splitting the data into train and test"""

# Create a test train split
train_split = int(0.8 * len(X))
X_train, y_train = X[:train_split], y[:train_split]
X_test, y_test = X[train_split:], y[train_split:]

len(X_train), len(y_train), len(X_test), len(y_test)

def plot_predictions(
    train_data = X_train,
    train_labels = y_train,
    test_data = X_test,
    test_labels = y_test,
    predictions = None):
    """
    Plots training data, test data and compares predictions.
    """
    plt.figure(figsize=(10, 7))

    # Plot the training data in blue
    plt.scatter(train_data, train_labels, c="b", s=4, label="Training data")

    # Plot the testing data in green
    plt.scatter(test_data, test_labels, c="g", s=4, label="Testing data")

    # Are there predictions
    if predictions is not None:
      # Plot the predictions
      plt.scatter(test_data, predictions, c="r", s=4, label="Predictions")

    # Show the legend
    plt.legend(prop={"size": 14});

plot_predictions()

"""### 3. Building Model"""

# Create a linear regression model classes
from torch import nn

class LinearRegressionModel(nn.Module):
  def __init__(self):
    super().__init__()
    self.weights = nn.Parameter(torch.randn(1,
                                            requires_grad=True,
                                            dtype=torch.float))

    self.bias = nn.Parameter(torch.randn(1,
                                         requires_grad=True,
                                         dtype= torch.float))

  # Forward method to define computation in model
  def forward(self, x:torch.Tensor) -> torch.Tensor:
    # x  is input data
    # Return formula
    return self.weights * x + self.bias

# Create random seet
torch.manual_seed(42)

# Create instance of model created
model_0 = LinearRegressionModel()

# Checkout the params
list(model_0.parameters())

# List named parameters
model_0.state_dict()

weight, bias

## Making prediction using torch inference

with torch.inference_mode():
  y_preds = model_0(X_test)

y_preds

plot_predictions(predictions=y_preds)

"""### 4. Train Model"""

model_0.state_dict()

# Set up loss function
loss_fn = nn.L1Loss()

# Setup an optimizer
optimizer = torch.optim.SGD(model_0.parameters(),
                            lr = 0.01,

                            )

torch.manual_seed(42)

# Building a training loop in PyTorch
epochs = 200

# Track the different values
epoch_count = []
loss_values = []
test_loss_values = []


## Training
# 0. Loop through dara
for epoch in range(epochs):

  # set the model to training model
  # The train mode in PyTorch sets tge all parameters that require gradients
  # to require gradients
  model_0.train()

  # 1. Forward Pass
  y_pred = model_0(X_train)

  # 2. Calculate loss
  loss = loss_fn(y_pred, y_train)
  #print(loss)
  # 3. Optimizer zero grad
  optimizer.zero_grad()

  # 4. Perform back propagation on loss WRT model params
  loss.backward()

  # 5. Perform gradient descent
  optimizer.step()


  # Turn of the different settings in model not needed for testing
  model_0.eval()

  # Turns of gradient tracking
  with torch.inference_mode():
    # 1. Do the forward mode
    test_pred = model_0(X_test)

    # 2. Calculate the test loss
    test_loss = loss_fn(test_pred, y_test)

  if epoch % 10 == 0:
    epoch_count.append(epoch)
    loss_values.append(loss)
    test_loss_values.append(test_loss)
    print(f"Epoch : {epoch} | Test : {loss} | Test Loss : {test_loss}")
    print(model_0.state_dict())

plt.plot(epoch_count, np.array(torch.tensor(loss_values).numpy()), label="Train Loss")
plt.plot(epoch_count, np.array(torch.tensor(test_loss_values).numpy()), label="Test Loss")
plt.title("Training and test loss curver")
plt.ylabel("loss")
plt.xlabel("Epochs")
plt.legend();

with torch.inference_mode():
  y_preds_new = model_0(X_test)

plot_predictions(predictions= y_preds)

plot_predictions(predictions= y_preds_new)

"""### Saving a model in PyTorch"""

from pathlib import Path

# Create models directory
MODEL_PATH = Path("models")
MODEL_PATH.mkdir(parents=True, exist_ok =True)

# Create model save path
MODEL_NAME = "01_Pytorch_workflow_model_0.pth"

MODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME

# SAve model state dict
print(f"Saving model to : {MODEL_SAVE_PATH}")
torch.save(obj= model_0.state_dict(),
           f= MODEL_SAVE_PATH)

## Loading a PyTorch Model
## We saved only State_dict of model

model_0.state_dict()

# Instantiate the new instance of Model Class

loaded_model_0 = LinearRegressionModel()

# Load the saved dict of model_0, this will update the model to these values
loaded_model_0.load_state_dict(torch.load(f=MODEL_SAVE_PATH))

loaded_model_0.state_dict()

# Make predictions with loaded model
loaded_model_0.eval()

with torch.inference_mode():
  loaded_model_preds = loaded_model_0(X_test)

loaded_model_preds

# Compare loaded model preds with original preds
y_preds_new == loaded_model_preds

"""## Putting it all together"""

# Import libs

import torch
from torch import nn
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# PyTorch Version
torch.__version__

# Create device agnostic code
# If we have access to gpu, our code will use it for faster computing

device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Using device : {device}")

"""### 6.1 Data"""

# Create some data using the linear regression formula
weights = 0.7
bias = 0.3

# Create range values
start = 0
end = 1
step = 0.02

# Create X and y
X = torch.arange(start, end, step).unsqueeze(dim=1)
y = weight * X + bias
X[:10], y[:10]

# Split the data
train_split = int(0.8 * len(X))

X_train, y_train = X[:train_split], y[:train_split]
X_test, y_test = X[train_split:], y[train_split:]

len(X_train), len(y_train), len(X_test), len(y_test)

plot_predictions(X_train, y_train, X_test, y_test)

"""### 6.2 Building a PyTorch linear model

"""

## Create a linear model by subclassing nn.Module

class LinearRegressionModelV2(nn.Module):
  def __init__(self):
    super().__init__()

    # Use nn.Linear() for creating the model params
    self.linear_layer = nn.Linear(in_features = 1,
                                  out_features = 1
                                  )
  def forward(self, x:torch.Tensor) -> torch.Tensor:
    return self.linear_layer(x)

# Set the manual seed
torch.manual_seed(42)
model_1 = LinearRegressionModelV2()
model_1, model_1.state_dict()

## Set the model to use the target device
next(model_1.parameters()).device

model_1.to(device)
next(model_1.parameters()).device

"""### 6.3 Training"""

# Setup the loss functions
loss_fn = nn.L1Loss()

# Setup the optimizer
optimizer = torch.optim.SGD(params = model_1.parameters(), lr=0.01, )

torch.manual_seed(42)

# Set the number of epochs
epochs = 1000

# Put data on the available device
# Without this, error will happen (not all model/data on device)
X_train = X_train.to(device)
X_test = X_test.to(device)
y_train = y_train.to(device)
y_test = y_test.to(device)

for epoch in range(epochs):
    ### Training
    model_1.train() # train mode is on by default after construction

    # 1. Forward pass
    y_pred = model_1(X_train)

    # 2. Calculate loss
    loss = loss_fn(y_pred, y_train)

    # 3. Zero grad optimizer
    optimizer.zero_grad()

    # 4. Loss backward
    loss.backward()

    # 5. Step the optimizer
    optimizer.step()

    ### Testing
    model_1.eval() # put the model in evaluation mode for testing (inference)
    # 1. Forward pass
    with torch.inference_mode():
        test_pred = model_1(X_test)

        # 2. Calculate the loss
        test_loss = loss_fn(test_pred, y_test)

    if epoch % 100 == 0:
        print(f"Epoch: {epoch} | Train loss: {loss} | Test loss: {test_loss}")

model_1.state_dict()

"""### 6.4  MAking and evaluating predictions"""

# Turn model into evaluation mode
model_1.eval()

# Make prediction on the test data
with torch.inference_mode():
  y_preds = model_1(X_test)

y_preds

plot_predictions(predictions=y_preds.cpu())

"""### 6.5 Saving and loading a trained model"""

model_1.state_dict()

from pathlib import Path

# 1. Create models directory
MODEL_PATH = Path("models")
MODEL_PATH.mkdir(parents=True, exist_ok=True)

# 2. Create model save path
MODEL_NAME = "01_PyTorch_workflo_model_1.pth"
MODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME
MODEL_SAVE_PATH

# 3. Save the model state dict
print(f"Saving model to {MODEL_SAVE_PATH}")
torch.save(obj = model_1.state_dict(),
           f = MODEL_SAVE_PATH)

# Load PyTorch Model

# Create instance of the model
loaded_model_1 = LinearRegressionModelV2()

# Load the saved model_1 state dict
loaded_model_1.load_state_dict(torch.load(MODEL_SAVE_PATH))

# Put the model to device
loaded_model_1.to(device)

next(loaded_model_1.parameters()).device

loaded_model_1.state_dict()

# Evaluate loaded model
loaded_model_1.eval()
with torch.inference_mode():
  loaded_model_1_preds = loaded_model_1(X_test)

y_preds == loaded_model_1_preds

