# -*- coding: utf-8 -*-
"""08_PyTorch_Paper_Replicating.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ymRxyBWWRY-rgVTkpI65vnPa6MLeFlse

# Paper Replicating

## 0.Get Setup
"""

# Continue with regular imports
import matplotlib.pyplot as plt
import torch
import torchvision

from torch import nn
from torchvision import transforms

# Try to get torchinfo, install it if it doesn't work
try:
    from torchinfo import summary
except:
    print("[INFO] Couldn't find torchinfo... installing it.")
    !pip install -q torchinfo
    from torchinfo import summary

# Try to import the going_modular directory, download it from GitHub if it doesn't work
try:
    from going_modular.going_modular import data_setup, engine
    from helper_functions import download_data, set_seeds, plot_loss_curves
except:
    # Get the going_modular scripts
    print("[INFO] Couldn't find going_modular or helper_functions scripts... downloading them from GitHub.")
    !git clone https://github.com/mrdbourke/pytorch-deep-learning
    !mv pytorch-deep-learning/going_modular .
    !mv pytorch-deep-learning/helper_functions.py . # get the helper_functions.py script
    !rm -rf pytorch-deep-learning
    from going_modular.going_modular import data_setup, engine
    from helper_functions import download_data, set_seeds, plot_loss_curves

# Device agnostic code
device = "cuda" if torch.cuda.is_available() else "cpu"
device

"""## 1.Get Data"""

# Download pizza, steak, sushi images from GitHub
image_path = download_data(source="https://github.com/mrdbourke/pytorch-deep-learning/raw/main/data/pizza_steak_sushi.zip",
                           destination="pizza_steak_sushi")
image_path

# Setup directory paths to train and test images
train_dir = image_path / "train"
test_dir = image_path / "test"

"""## 2.Create Datasets and DataLoaders

### 2.1 Create Transforms
"""

from going_modular.going_modular import data_setup
from torchvision import transforms

# Create image size
IMG_SIZE = 224

# Create transforms pipeline
manual_transforms = transforms.Compose([
    transforms.Resize((IMG_SIZE, IMG_SIZE)),
    transforms.ToTensor()
])

manual_transforms

"""### 2.2 Create dataloaders"""

# Create a batch size of 32
# Paper uses 4096 , our hardware cant handle
# Later can be upgraded

BATCH_SIZE = 32

# create dataloaders
train_dataloader, test_dataloader, class_names = data_setup.create_dataloaders(
    train_dir = train_dir,
    test_dir = test_dir,
    transform = manual_transforms,
    batch_size = BATCH_SIZE
)

len(train_dataloader), len(test_dataloader), class_names

"""### 2.3 Visualize a single image"""

# Get a batch of images
image_batch, label_batch = next(iter(train_dataloader))

# Get a single image and label from the batch
image, label = image_batch[0], label_batch[0]

# View the shapes
image.shape, label

# Plot the image
import matplotlib.pyplot as plt

# Channels at the end
plt.imshow(image.permute(1,2,0))
plt.title(class_names[label])
plt.axis(False);

"""## 3.Replicating ViT : Overview"""

















